# ---------------- app/config/settings.yaml ----------------
site_url: "https://tes/AppleBankAndCitiPOC"
client_id: "your-client-id"
client_secret: "your-client-secret"
mongo_uri: "mongodb://localhost:27017"
database: "test"

# ---------------- app/db/mongo_client.py ----------------
import yaml
from pymongo import MongoClient

class MongoConnector:
    """
    Handles MongoDB client creation and database connection
    by reading from a YAML config file.
    """
    def __init__(self, config_path="app/config/settings.yaml"):
        with open(config_path, "r") as f:
            config = yaml.safe_load(f)
        self.mongo_uri = config["mongo_uri"]
        self.db_name = config["database"]

    def get_database(self):
        """Returns the database instance from MongoClient."""
        client = MongoClient(self.mongo_uri)
        return client[self.db_name]

# ---------------- app/model/document_schema.py ----------------
from typing import Optional, List
from pydantic import BaseModel

class StatusModel(BaseModel):
    text_extraction: Optional[str] = ""
    vector_indexing: Optional[str] = ""

class SharePointInfoModel(BaseModel):
    relative_path: str
    library_name: str
    site_url: str

class StepModel(BaseModel):
    step_name: str
    result: str
    timestamp: str

class DocumentModel(BaseModel):
    doc_run_id: str
    run_id: str
    tenant_id: str
    engagement_id: str
    year: int
    quarter: str
    industry_type: str
    obligor_name: str
    doc_id: str
    original_filename: str
    renamed_filename: str = ""
    base64: str
    file_hash: str = "hash_placeholder"
    status: StatusModel = StatusModel()
    blob_path: str = ""
    sas_url: str = ""
    sharepoint_info: SharePointInfoModel
    steps: List[StepModel]

# ---------------- app/sharepoint/client.py ----------------
import base64
import io
import re
from office365.sharepoint.client_context import ClientContext
from office365.runtime.auth.client_credential import ClientCredential

class SharePointClient:
    """
    SharePoint client to handle authentication and file operations.
    """
    def __init__(self, site_url: str, client_id: str, client_secret: str):
        credentials = ClientCredential(client_id, client_secret)
        self.ctx = ClientContext(site_url).with_credentials(credentials)
        self.site_url = site_url

    def get_context(self):
        """Returns the initialized SharePoint context."""
        return self.ctx

    def get_folder(self, path: str):
        """Fetches a SharePoint folder by its relative URL."""
        folder = self.ctx.web.get_folder_by_server_relative_url(path)
        self.ctx.load(folder)
        self.ctx.execute_query()
        return folder

    def get_base64_content(self, file_obj):
        """
        Reads file content from SharePoint and returns it as a base64 string.
        """
        try:
            file_url = file_obj.properties["ServerRelativeUrl"]
            file = self.ctx.web.get_file_by_server_relative_url(file_url)
            mem_file = io.BytesIO()
            file.download(mem_file).execute_query()
            mem_file.seek(0)
            return base64.b64encode(mem_file.read()).decode("utf-8")
        except Exception as e:
            print(f"[ERROR] Reading file content: {e}")
            return None

    async def fetch_all_files(self, folder):
        """
        Recursively fetches all files from a given SharePoint folder.
        """
        self.ctx.load(folder.expand(["Folders", "Files"]))
        self.ctx.execute_query()
        all_files = list(folder.files)
        for subfolder in folder.folders:
            all_files.extend(await self.fetch_all_files(subfolder))
        return all_files

    @staticmethod
    def extract_year_quarter(folder_name: str):
        """
        Extracts year and quarter (e.g., Q1_2025 or Q1 2025).
        """
        match = re.match(r"(?i)(Q[1-4])[_\s]?(\d{4})", folder_name.strip())
        if match:
            return match.group(2), match.group(1).upper()
        return None, None

# ---------------- app/sharepoint/ingestion_service.py ----------------
import uuid
from datetime import datetime
from app.model.document_schema import DocumentModel

COLL_MANAGEMENT = "run_management"
COLL_DOCUMENTS = "run_documents"

class SharePointIngestionService:
    """
    Handles business logic for SharePoint file ingestion and MongoDB updates.
    """
    def __init__(self, db, config):
        self.db = db
        self.config = config
        self.site_url = config.get("site_url")

    def ensure_run_id(self, tenant_id: str, engagement_id: str) -> str:
        """
        Returns an existing or newly created run_id for the given tenant and engagement.
        """
        existing = self.db[COLL_MANAGEMENT].find_one({"tenant_id": tenant_id, "engagement_id": engagement_id})
        if existing:
            return existing["run_id"]
        run_id = f"RUN{str(self.db[COLL_MANAGEMENT].estimated_document_count() + 1).zfill(3)}"
        self.db[COLL_MANAGEMENT].insert_one({
            "run_id": run_id,
            "tenant_id": tenant_id,
            "engagement_id": engagement_id,
            "metadata": []
        })
        return run_id

    async def ingest(self, folder, client, tenant_id: str, engagement_id: str, quarter: str, year: str):
        """
        Traverses SharePoint folders, extracts metadata, checks for duplicates, and inserts new files into MongoDB.
        """
        ctx = client.get_context()
        run_id = self.ensure_run_id(tenant_id, engagement_id)
        ctx.load(folder.expand(["Folders"]))
        ctx.execute_query()

        try:
            for industry_folder in folder.folders:
                industry = industry_folder.properties["Name"]
                ctx.load(industry_folder.expand(["Folders"]))
                ctx.execute_query()

                for obligor_folder in industry_folder.folders:
                    obligor = obligor_folder.properties["Name"]
                    doc_run_id = f"{industry}_{quarter}_{year}_{obligor.replace(' ', '_')}"
                    ctx.load(obligor_folder.expand(["Folders", "Files"]))
                    ctx.execute_query()

                    all_files = await client.fetch_all_files(obligor_folder)
                    existing_base64s = set(
                        doc["base64"] for doc in self.db[COLL_DOCUMENTS].find({"doc_run_id": doc_run_id}, {"base64": 1})
                    )
                    seen_base64s = set()
                    new_docs = []

                    for file_obj in all_files:
                        base64_str = client.get_base64_content(file_obj)
                        if not base64_str or base64_str in seen_base64s or base64_str in existing_base64s:
                            continue
                        seen_base64s.add(base64_str)

                        doc = DocumentModel(
                            doc_run_id=doc_run_id,
                            run_id=run_id,
                            tenant_id=tenant_id,
                            engagement_id=engagement_id,
                            year=int(year),
                            quarter=quarter,
                            industry_type=industry,
                            obligor_name=obligor,
                            doc_id=str(uuid.uuid4()),
                            original_filename=file_obj.properties["Name"],
                            base64=base64_str,
                            sharepoint_info={
                                "relative_path": file_obj.properties["ServerRelativeUrl"],
                                "library_name": "Documents",
                                "site_url": self.site_url
                            },
                            steps=[{
                                "step_name": "sharepoint_ingestion",
                                "result": "SUCCESS",
                                "timestamp": datetime.utcnow().isoformat()
                            }]
                        )
                        new_docs.append(doc.dict())

                    if new_docs:
                        self.db[COLL_DOCUMENTS].insert_many(new_docs)
                        self._update_run_metadata(run_id, year, quarter, industry, obligor, doc_run_id)

        except Exception as e:
            return {"success": False, "message": f"Processing error: {e}"}

        return {"success": True, "message": "Ingestion completed.", "run_id": run_id}

    def _update_run_metadata(self, run_id, year, quarter, industry, obligor, doc_run_id):
        """
        Updates metadata structure in run_management to link quarter/industry/obligor with doc_run_id.
        """
        run_doc = self.db[COLL_MANAGEMENT].find_one({"run_id": run_id})
        updated = False
        for meta in run_doc["metadata"]:
            if meta["year"] == int(year) and meta["quarter"] == quarter:
                for ind in meta["industries"]:
                    if ind["industry"] == industry:
                        if not any(o["obligor_name"] == obligor for o in ind["obligors"]):
                            ind["obligors"].append({"obligor_name": obligor, "doc_run_id": doc_run_id})
                            updated = True
                        break
                else:
                    meta["industries"].append({"industry": industry, "obligors": [{"obligor_name": obligor, "doc_run_id": doc_run_id}]})
                    updated = True
                break
        else:
            run_doc["metadata"].append({
                "year": int(year),
                "quarter": quarter,
                "industries": [{"industry": industry, "obligors": [{"obligor_name": obligor, "doc_run_id": doc_run_id}]}]
            })
            updated = True

        if updated:
            self.db[COLL_MANAGEMENT].replace_one({"_id": run_doc["_id"]}, run_doc)

# ---------------- test/test_sharepoint_ingestion.py ----------------
import asyncio
import yaml
from app.db.mongo_client import MongoConnector
from app.sharepoint.client import SharePointClient
from app.sharepoint.ingestion_service import SharePointIngestionService

async def test():
    """
    Test script to simulate SharePoint ingestion with mocked inputs.
    """
    with open("app/config/settings.yaml", "r") as f:
        config = yaml.safe_load(f)

    db = MongoConnector().get_database()
    site_url = config["site_url"]
    client_id = config["client_id"]
    client_secret = config["client_secret"]

    sp_client = SharePointClient(site_url, client_id, client_secret)
    processor = SharePointIngestionService(db, config)

    folder_path = "/sites/AppleBankAndCitiPOC/Shared Documents/General/test_bank22/Q1 2025"
    folder_name = folder_path.strip("/").split("/")[-1]
    year, quarter = sp_client.extract_year_quarter(folder_name)
    if not year or not quarter:
        print("[ERROR] Could not extract year/quarter")
        return

    folder = sp_client.get_folder(folder_path)
    result = await processor.ingest(folder, sp_client, tenant_id="medconnect", engagement_id="applebank", quarter=quarter, year=year)
    print(result)

if __name__ == "__main__":
    asyncio.run(test())
