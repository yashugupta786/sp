# ---------------- app/config/settings.yaml ----------------
client_id: "your-client-id"
client_secret: "your-client-secret"
mongo_uri: "mongodb://localhost:27017"
database: "test"

# ---------------- app/db/mongo_client.py ----------------
import yaml
from motor.motor_asyncio import AsyncIOMotorClient

class MongoDBClient:
    """
    MongoDBClient handles reading the configuration from a YAML file
    and initializing the MongoDB connection asynchronously.
    """
    def __init__(self, config_path="app/config/settings.yaml"):
        with open(config_path, "r") as f:
            config = yaml.safe_load(f)
        self.mongo_uri = config["mongo_uri"]
        self.db_name = config["database"]
        self.client = AsyncIOMotorClient(self.mongo_uri)

    def get_database(self):
        """Returns the connected database instance."""
        return self.client[self.db_name]

# ---------------- app/model/document_schema.py ----------------
from typing import Optional, List
from pydantic import BaseModel

class StatusModel(BaseModel):
    text_extraction: Optional[str] = ""
    vector_indexing: Optional[str] = ""

class SharePointInfoModel(BaseModel):
    relative_path: str
    library_name: str
    site_url: str

class StepModel(BaseModel):
    step_name: str
    result: str
    timestamp: str

class DocumentModel(BaseModel):
    doc_run_id: str
    run_id: str
    tenant_id: str
    engagement_id: str
    year: int
    quarter: str
    industry_type: str
    obligor_name: str
    doc_id: str
    original_filename: str
    renamed_filename: str = ""
    base64: str
    file_hash: str = "hash_placeholder"
    status: StatusModel = StatusModel()
    blob_path: str = ""
    sas_url: str = ""
    sharepoint_info: SharePointInfoModel
    steps: List[StepModel]

# ---------------- app/sharepoint/client.py ----------------
import base64
import io
import re
from office365.sharepoint.client_context import ClientContext
from office365.runtime.auth.client_credential import ClientCredential

class SharePointClient:
    """
    Client for SharePoint file access and traversal.
    """
    def __init__(self, site_url: str, client_id: str, client_secret: str):
        credentials = ClientCredential(client_id, client_secret)
        self.ctx = ClientContext(site_url).with_credentials(credentials)
        self.site_url = site_url

    def get_folder(self, path: str):
        """Fetch a folder object by its relative URL."""
        folder = self.ctx.web.get_folder_by_server_relative_url(path)
        self.ctx.load(folder)
        self.ctx.execute_query()
        return folder

    def get_base64_content(self, file_obj):
        """Return base64 content of a SharePoint file object."""
        try:
            file_url = file_obj.properties["ServerRelativeUrl"]
            file = self.ctx.web.get_file_by_server_relative_url(file_url)
            mem_file = io.BytesIO()
            file.download(mem_file).execute_query()
            mem_file.seek(0)
            return base64.b64encode(mem_file.read()).decode("utf-8")
        except Exception as e:
            print(f"[ERROR] Failed to get base64 for {file_obj.properties['Name']}: {e}")
            return None

    def extract_year_quarter(self, folder_name: str):
        """Extract year and quarter like Q1_2024 or Q1 2024."""
        match = re.match(r"(?i)(Q[1-4])[_\s]?(\d{4})", folder_name.strip())
        if match:
            return match.group(2), match.group(1).upper()
        return None, None

    def traverse_files(self, folder):
        """Recursively collect all files from a SharePoint folder."""
        self.ctx.load(folder.expand(["Folders", "Files"]))
        self.ctx.execute_query()
        files = list(folder.files)
        for subfolder in folder.folders:
            files.extend(self.traverse_files(subfolder))
        return files

# ---------------- app/sharepoint/ingestion_service.py ----------------
import uuid
from datetime import datetime
from app.model.document_schema import DocumentModel, SharePointInfoModel, StepModel

class SharePointIngestionService:
    """
    Service for ingesting SharePoint documents into MongoDB with metadata management.
    """
    def __init__(self, db, config):
        self.db = db
        self.config = config

    async def ingest(self, folder, sp_client, tenant_id, engagement_id, year, quarter):
        run_management = self.db["run_management"]
        run_documents = self.db["run_documents"]

        # Get or create run_id
        run_doc = await run_management.find_one({"tenant_id": tenant_id, "engagement_id": engagement_id})
        if not run_doc:
            run_id = f"RUN{str(await run_management.count_documents({}) + 1).zfill(3)}"
            run_doc = {
                "run_id": run_id,
                "tenant_id": tenant_id,
                "engagement_id": engagement_id,
                "metadata": []
            }
            await run_management.insert_one(run_doc)
        else:
            run_id = run_doc["run_id"]

        self.ctx = sp_client.ctx
        self.ctx.load(folder.expand(["Folders"]))
        self.ctx.execute_query()

        for industry_folder in folder.folders:
            industry = industry_folder.properties["Name"]
            self.ctx.load(industry_folder.expand(["Folders"]))
            self.ctx.execute_query()

            for obligor_folder in industry_folder.folders:
                obligor = obligor_folder.properties["Name"]
                doc_run_id = f"{industry}_{quarter}_{year}_{obligor.replace(' ', '_')}"

                self.ctx.load(obligor_folder.expand(["Folders", "Files"]))
                self.ctx.execute_query()

                # Collect existing base64s from run_documents
                existing_docs = await run_documents.find({"doc_run_id": doc_run_id}, {"base64": 1}).to_list(length=None)
                existing_base64s = set(doc["base64"] for doc in existing_docs)

                files = sp_client.traverse_files(obligor_folder)
                docs = []
                seen_base64s = set()

                for file_obj in files:
                    base64_str = sp_client.get_base64_content(file_obj)
                    if not base64_str or base64_str in seen_base64s or base64_str in existing_base64s:
                        continue

                    seen_base64s.add(base64_str)
                    doc = DocumentModel(
                        doc_run_id=doc_run_id,
                        run_id=run_id,
                        tenant_id=tenant_id,
                        engagement_id=engagement_id,
                        year=int(year),
                        quarter=quarter,
                        industry_type=industry,
                        obligor_name=obligor,
                        doc_id=str(uuid.uuid4()),
                        original_filename=file_obj.properties["Name"],
                        base64=base64_str,
                        sharepoint_info=SharePointInfoModel(
                            relative_path=file_obj.properties["ServerRelativeUrl"],
                            library_name="Documents",
                            site_url=sp_client.site_url
                        ),
                        steps=[
                            StepModel(
                                step_name="sharepoint_ingestion",
                                result="SUCCESS",
                                timestamp=datetime.utcnow().isoformat()
                            )
                        ]
                    )
                    docs.append(doc.dict())

                if docs:
                    await run_documents.insert_many(docs)

                    # Update run_management metadata
                    run_doc = await run_management.find_one({"run_id": run_id})
                    updated = False
                    for meta in run_doc["metadata"]:
                        if meta["year"] == int(year) and meta["quarter"] == quarter:
                            for ind in meta["industries"]:
                                if ind["industry"] == industry:
                                    if not any(ob["obligor_name"] == obligor for ob in ind["obligors"]):
                                        ind["obligors"].append({"obligor_name": obligor, "doc_run_id": doc_run_id})
                                        updated = True
                                    break
                            else:
                                meta["industries"].append({"industry": industry, "obligors": [{"obligor_name": obligor, "doc_run_id": doc_run_id}]})
                                updated = True
                            break
                    else:
                        run_doc["metadata"].append({
                            "year": int(year),
                            "quarter": quarter,
                            "industries": [{"industry": industry, "obligors": [{"obligor_name": obligor, "doc_run_id": doc_run_id}]}]
                        })
                        updated = True

                    if updated:
                        await run_management.replace_one({"run_id": run_id}, run_doc)

        return {"status": "success", "message": f"Processed SharePoint folder for run_id: {run_id}"}

# ---------------- test/test_sharepoint_ingestion.py ----------------
import asyncio
import yaml
from app.db.mongo_client import MongoDBClient
from app.sharepoint.client import SharePointClient
from app.sharepoint.ingestion_service import SharePointIngestionService

async def test_ingestion():
    """Test script to execute SharePoint ingestion."""
    try:
        with open("app/config/settings.yaml", "r") as f:
            config = yaml.safe_load(f)

        db = MongoDBClient().get_database()

        site_url = input("Enter SharePoint site URL: ").strip()
        sp_folder_path = input("Enter SharePoint folder path (e.g., /sites/.../Q1 2025): ").strip()
        tenant_id = input("Enter tenant ID: ").strip()
        engagement_id = input("Enter engagement ID: ").strip()

        sp_client = SharePointClient(site_url, config["client_id"], config["client_secret"])
        folder = sp_client.get_folder(sp_folder_path)

        folder_name = sp_folder_path.strip("/").split("/")[-1]
        year, quarter = sp_client.extract_year_quarter(folder_name)
        if not year or not quarter:
            print("[ERROR] Failed to parse quarter and year!")
            return

        service = SharePointIngestionService(db, config)
        result = await service.ingest(folder, sp_client, tenant_id, engagement_id, year, quarter)
        print(result)

    except Exception as e:
        print({"status": "error", "message": str(e)})

if __name__ == "__main__":
    asyncio.run(test_ingestion())
